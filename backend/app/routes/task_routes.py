from fastapi import APIRouter, Depends, HTTPException, Query, Body
from sqlalchemy.orm import Session
from ..database.database import get_db
from ..models.task import Task
from ..schemas.task_schemas import TaskCreate, TaskUpdate, TaskListResponse, TaskBulkDelete
import logging
from typing import Optional

logger = logging.getLogger(__name__)

router = APIRouter()


def get_task_or_404(task_id: int, db: Session):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ 404"""
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return task


@router.post("/tasks/", response_model=dict)
def create_task(task: TaskCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task.title}")

    new_task = Task(title=task.title, description=task.description)
    try:
        db.add(new_task)
        db.commit()
        db.refresh(new_task)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: id={new_task.id}, title={new_task.title}")
        return {"message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "task_id": new_task.id}
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")


@router.get("/tasks/", response_model=TaskListResponse)
def get_tasks(
        db: Session = Depends(get_db),
        is_completed: Optional[bool] = Query(None, description="–§–∏–ª—å—Ç—Ä: true - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, false - –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"),
        q: Optional[str] = Query(None, min_length=2, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏ (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)"),
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)"),
        size: int = Query(5, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5, –º–∞–∫—Å. 100)")
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    logger.info(f"üìå –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á: —Å—Ç—Ä. {page}, —Ä–∞–∑–º–µ—Ä {size}, —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É={is_completed}, –ø–æ–∏—Å–∫={q}")

    query = db.query(Task)

    if is_completed is not None:
        query = query.filter(Task.is_completed == is_completed)

    if q:
        query = query.filter(Task.title.ilike(f"%{q}%"))

    total_tasks = query.count()
    tasks = query.order_by(Task.created_at.desc()).offset((page - 1) * size).limit(size).all()

    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ {total_tasks} (—Å—Ç—Ä. {page})")

    return {
        "total": total_tasks,
        "page": page,
        "size": size,
        "tasks": [
            {
                "id": t.id,
                "title": t.title,
                "description": t.description,
                "is_completed": t.is_completed,
                "created_at": t.created_at
            }
            for t in tasks
        ]
    }


@router.get("/tasks/{task_id}/", response_model=dict)
def get_task(task_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å id={task_id}")
    task = get_task_or_404(task_id, db)
    return {
        "id": task.id,
        "title": task.title,
        "description": task.description,
        "is_completed": task.is_completed,
        "created_at": task.created_at,
    }


@router.put("/tasks/{task_id}/", response_model=dict)
def update_task(task_id: int, task_update: TaskUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å id={task_id}")

    task = get_task_or_404(task_id, db)

    update_data = task_update.dict(exclude_unset=True)
    for key, value in update_data.items():
        logger.info(f"üîÑ –ò–∑–º–µ–Ω—è–µ–º {key}: {getattr(task, key)} -> {value}")
        setattr(task, key, value)

    db.commit()
    db.refresh(task)
    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id={task.id}")

    return {
        "message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        "task": {
            "id": task.id,
            "title": task.title,
            "description": task.description,
            "is_completed": task.is_completed,
            "created_at": task.created_at,
        },
    }


@router.delete("/tasks/{task_id}/", response_model=dict)
def delete_task(task_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å id={task_id}")

    task = get_task_or_404(task_id, db)

    try:
        db.delete(task)
        db.commit()
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å id={task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        return {"message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", "deleted_task_id": task_id}
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")


@router.delete("/tasks/bulk-delete", response_model=dict)
def bulk_delete_tasks(task_data: TaskBulkDelete = Body(...), db: Session = Depends(get_db)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –ø–æ —Å–ø–∏—Å–∫—É ID"""
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á: {task_data.task_ids}")

    unique_task_ids = list(set(task_data.task_ids))
    existing_task_ids = {task_id for task_id, in db.query(Task.id).filter(Task.id.in_(unique_task_ids)).all()}
    deleted_ids = list(existing_task_ids)
    not_found_ids = list(set(unique_task_ids) - existing_task_ids)

    if not deleted_ids:
        logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö ID: {not_found_ids}")
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    try:
        db.query(Task).filter(Task.id.in_(deleted_ids)).delete(synchronize_session=False)
        db.commit()
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã: {deleted_ids}")
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á")

    return {"deleted": deleted_ids, "not_found": not_found_ids}
